name: Release
on:
  push:
  release:
    types:
      - published
jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
          # Linux
        - build: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-latest
          target: arm-unknown-linux-gnueabihf
          # macOS
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
          # Windows
        - build: win-msvc
          os: windows-latest
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          target: i686-pc-windows-msvc
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ubuntu-install-packages.sh

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/flashlight"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/flashlight

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../flashlight-${{ matrix.target }}.zip flashlight.exe
        cd -

    - name: Build (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czvf ../../../flashlight-${{ matrix.target }}.tar.gz flashlight
        cd -

    - name: Upload release archive
      uses: shogo82148/actions-upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
